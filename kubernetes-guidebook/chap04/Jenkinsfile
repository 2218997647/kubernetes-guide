def label = "worker-${UUID.randomUUID().toString()}"

podTemplate(label: label, containers: [
  containerTemplate(name: 'jnlp', image: 'jnlp-slave:alpine', args: '${computer.jnlpmac} ${computer.name}'),
  containerTemplate(name: 'docker', image: 'docker:18.06', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'maven', image: 'maven:3.3.9-8u144', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'kubectl', image: 'kubectl:v1.13.4', command: 'cat', ttyEnabled: true)
],
volumes: [
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
  hostPathVolume(mountPath: '/etc/hosts', hostPath: '/etc/hosts'),
]) {
  node(label) {
    def myRepo = checkout scm
    def gitCommit = myRepo.GIT_COMMIT
    def gitBranch = myRepo.GIT_BRANCH
    def shortGitCommit = "${gitCommit[0..10]}"
    def previousGitCommit = sh(script: "git rev-parse ${gitCommit}~", returnStdout: true)
    def JOB_NAME = "${JOB_NAME}"
    def JOB_NUMBER = "${BUILD_NUMBER}"
    def HARBOR_ADDRESS = "${HARBOR_ADDRESS}"
    def NS = "${NAMESPACE}"
    def APP_IMAGE_URL = "${HARBOR_ADDRESS}/${NS}/${JOB_NAME}"
    stage('build') {
      try {
        container('maven') {
          sh """
            echo '***start to build***'
mvn clean install
            """
        }
      }
      catch (exc) {
        println "Failed to build - ${currentBuild.fullDisplayName}"
        throw(exc)
      }
    }
    stage('Create Docker images') {
      container('docker') {
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
          credentialsId: 'HARBOR_USER',
          usernameVariable: 'HARBOR_USER',
          passwordVariable: 'HARBOR_PASSWORD']]) {
          sh """
            echo '*****make image*****'
            docker login -u ${HARBOR_USER} -p ${HARBOR_PASSWORD} ${HARBOR_ADDRESS}
            docker build -t ${APP_IMAGE_URL}:${JOB_NUMBER} .
            docker tag ${APP_IMAGE_URL}:${JOB_NUMBER} ${APP_IMAGE_URL}:latest
            docker push ${APP_IMAGE_URL}:${JOB_NUMBER}
            docker push ${APP_IMAGE_URL}:latest
            """
          }
        }
      }
    stage('Run kubectl') {
      container('kubectl') {
        sh """
           echo '***update  deploy***'
           kubectl set image sts/${JOB_NAME} ${JOB_NAME}=${APP_IMAGE_URL}:${JOB_NUMBER} -n ${NS} --record
           kubectl get po -n ${NS} -l app=${JOB_NAME} -w
           echo '***Deploy Finished***'
           """
      }
    }
    }
  }
